module FileAccess	//# Function FileInputOpen(fID as integer) As integer  	//- Open file for reading.   	//- fID is the ID# of the file from the input file list.  	//- If fID is 0 then the preprocessed text file will be opened.  	//- If the file does not exist in the list, 0 is returned.  	//- If the file cannot be opened, -1 is returned.  	//- If the file was successfully opened, the file ID# is returned.	//# End Function	//# Function FileInputOpen(fileName as string) As integer  	//- Open file for reading, by file name. The file must be in the input file list. 	//- If duplicate file names exist in different sub-folders, the first one will be chosen.  	//- Use the exact fileName (including sub-folder name) if you want a specific file.  	//- If the file does not exist in the list, 0 is returned.  	//- If the file cannot be opened, -1 is returned.  	//- If the file was successfully opened, the file ID# is returned.  	//# End Function	//# Function FileOutputOpen(fileName as string, optional subfolder as string = "") As integer  	//- Create and open file for writing, by file name. If the file already exists it will be deleted and re-created.  	//- The file will be created in the specified subfolder of the input folder, or in the specified subfolder of the parent folder of the input file.  	//- If you specify "" as the fileName then the preprocessor output file will be assumed.  	//- If the file exists and cannot be deleted, -1 is returned.  	//- If the file cannot be created, -2 is returned.  	//- If the filename is bad, -3 is returned.  	//- If the file was successfully opened, the file ID# is returned.	//# End Function	//# Sub FileClose(fID as integer, optional delete as boolean = false)  	//- Close the open file specified by its file ID#.	//- If an output file, and delete = TRUE, then delete the file.	//# End Sub	//# Function FileReadLine(fID as integer) As string  	//- Reads a line from the specified file.   	//- If the file is at end-of-file, then "" will be returned.	//# End Function	//# Sub FileWriteLine(fID as integer, line as string)  	//- Write a line of text to an open output file specified by its file ID#.	//# End Sub	//# Sub FileWriteLine(fID as integer, fields() as string)  	//- Write a line of text to an open output file specified by its file ID#. 	//- If more than one field is specified, they will be joined together using the preproprocessor output line format separator.	//# End Sub	//# Function FileDownload(url as string, optional timeout as integer = 60, optional subfolder as string = "") As string  	//- Download the specified URL and store the downloaded file at the root level of the input folder,  	//- (if subfolder = ""), or in a sub-folder of the root level (if subfolder<>""). The sub-folder will  	//- be created where necessary. Any existing file with the same name will be overwritten.  	//- Timeout is the number of seconds after which the routine aborts and returns "".    	//- If the download is successful, the downloaded filename is returned.     //- If the file ends in ".gz" or ".gzip" it will be unzipped (and the resulting name returned)	//# End function	//# Function FileEOF(fID as integer) As boolean  	//- Returns TRUE if the file being read is at end-of-file.	//# End Function	//# Function FileExists(filename as string) As boolean  	//- Return TRUE if the file with the given name exists in the input folder	//# End Function	//# Function FileOutputLineFormat() As integer  	//- Returns the line format of the preprocessor output file. 0 = Tab-separated, 1 = Char-separated, 2 = Fixed format  	//- If Char-separated, use FileOutputLineSeparator to determine the separator string.	//# End Function	//# Function FileOutputLineSeparator() As string	//- Specifies the field separator character string used in the preprocessor output file (where applicable)	//# End Function	//# Function FileInputLineFormat() As integer  	//- Returns the line format of the input file. 0 = Tab-separated, 1 = Char-separated, 2 = Fixed format  	//- If Char-separated, use FileInputLineSeparator to determine the separator.	//# End Function	//# Function FileInputLineSeparator() As string	//- Specifies the field separator character string used in the input file (where applicable)	//# End Functionend modulemodule ScriptParameters	//# Function CheckBoxValue(n as Integer) As boolean  	//- Return the value of script parameter checkbox n	//# End Function	//# Function CheckboxValue(caption as string) As boolean  	//- Return the value of script parameter checkbox with the given caption	//# End Function	//# Function PopupValue(n as Integer) As integer  	//- Return the value of script parameter popup menu n	//# End Function	//# Function PopupValueAsString(n as Integer) As string  	//- Return the value of script parameter popup menu n	//# End Function	//# Function PopupValue(caption as string) As integer  	//- Return the value of script parameter popup menu with the specified caption	//# End Function	//# Function PopupValueAsString(caption as string) As string  	//- Return the value of script parameter popup menu with the specified caption	//# End Function	//# Function TextValue(n as Integer) As string  	//- Return the value of script parameter text field n	//# End Function	//# Function TextValue(caption as string) As string  	//- Return the value of script parameter text field with the given caption	//# End Functionend modulemodule UI	//# Sub PreprocessStatus(assigns s as string)  	//- Add a line to the preprocess status list. Black text is used.	//# End Sub	//# Sub PreprocessStatus(c as Color, assigns s as string)  	//- Add a line to the preprocess status list, in the given text colour.	//# End Sub	//# Sub ProcessStatus(assigns s as string)	//- Add a line to the process status list. Black text is used.	//# End Sub	//# Sub ProcessStatus(c as Color, assigns s as string)  	//- Add a line to the process status list, in the given text colour.	//# End Sub	//# function OutputFileName() as string	//- The file name for the output catalogue.	//# end function	//# sub OutputFileName(assigns s as string)	//- The file name for the output catalogue.	//# end sub	//# function OutputDescription() as string	//- The description for the output catalogue.	//# end function	//# sub OutputDescription(assigns s as string)	//- The description for the output catalogue.	//# end sub	//# function OutputShortName() as string	//- The short name for the output catalogue.	//# end function	//# sub OutputShortName(assigns s as string)	//- The short name for the output catalogue.	//# end sub	//# function OutputMediumName() as string	//- The medium name for the output catalogue.	//# end function	//# sub OutputMediumName(assigns s as string)	//- The medium name for the output catalogue.	//# end sub	//# function OutputCatalogueNotes() as string	//- The catalogue notes for the output catalogue.	//# end function	//# sub OutputCatalogueNotes(assigns s as string)	//- The catalogue notes for the output catalogue.	//# end sub	//# sub Yield()	//- Place in long-running loops to give the application some breathing room.	//# end sub	//# function DoubleToInternal(r as double, decPlaces as integer) as string	//- Convert the double r into a string using standard non-localized internal format (i.e. decimal point).	//- decPlaces specifies the number of decimal places in the result. e.g. DoubleToInternal(1.23,1) = "1.2"	//- If decPlaces is negative then show up to |decPlaces| decimal digits, but delete trailing zeroes. e.g.	//- DoubleToInternal(1.25,-5) = "1.25", DoubleToInternal(1.2571961,-4) = "1.2572"	//# end function	//# function debug(paramarray s as string)	//- Display string/s in debug window, separated by spaces.	//# function GetHTMLTable(url: string, optional tableNumber as integer = 1)	//- Extract the tableNumber-th HTML table from the given URL.	//- Return rows of the table as an array of tab-separated strings.end module
APSF,V1,0,,-1,0,
// Print finder charts and observing forms
//= Finder Charts

//------------------------------------------------------------------
// Global variables
	dim what as integer
	dim isPrinting as boolean
	dim d1 as double
	dim d2 as double
	dim d3 as double
	dim wtitle as string
	dim w as integer
	dim h as integer
	dim dss as boolean
	dim template as boolean
	dim pagedate as boolean
	dim obsform as boolean
	dim charts as boolean

//------------------------------------------------------------------
sub PageNumbering(c as Canvas, page as integer, extra as string)
  // Handle page numbering
  dim s as string
  
  c.TextItalic=true
  c.ForeColor(64,64,64)
  dim d as new Date
  s=d.ShortDate+"   "+d.ShortTime
  c.DrawText s,0,c.TextHeight
  s="Page "+str(page)
  s=s+extra
  c.DrawText s,c.Width-c.TextWidth(s),c.TextHeight
  c.TextItalic=false
  c.ForeColor(0,0,0)
end sub

//------------------------------------------------------------------
sub PrintObsForm(c as Canvas, page as integer, ob as APPlanObject)
  // Print the observation form page
  dim t,tNotes as Table, w,j,row,col,ncols,y as integer, vtitle,vvalue as string
  dim nObsTable,iObs,obsTableHeight,ytop as integer, extra as string

  if pagedate then
    if charts then
      extra="b"
    else
      extra=""
    end if
    PageNumbering(c,page,extra)
    y=1.5*c.Textheight
  else
    y=0
  end if
  
  c.TextFont("Times",10)
  
  nObsTable=3  // Three observations per page
  ncols=8 // 8 columns in object table

  // Create the object description table

  t=new Table(2,ncols,"Object Data")

  for j=1 to ncols
    t.ColumnJustify(j)=Table.justify_Center+Table.justify_VCenter
  next

  row=1
  col=1
  dim nuser as integer = Plan().nUserFieldDefinitions
  for j=0 to 17+nuser
    vvalue=""
    select case j
    case 0
      vtitle="ID"
      vvalue=ob.ID
    case 1
      vtitle="Name"
      vvalue=ob.Name
    case 2
      vtitle="RA"
      vvalue=ob.RAFormatted
    case 3
      vtitle="Dec"
      vvalue=ob.DecFormatted
    case 4
      vtitle="Constellation"
      vvalue=ob.Constellation
    case 5
      vtitle="Type"
      vvalue=ob.Type
    case 6
      vtitle="Magnitude"
      if ob.Magnitude<30.0 then vvalue=format(ob.Magnitude,"-0.0")
    case 7
      vtitle="Magnitude 2"
      if ob.Magnitude2<30.0 then vvalue=format(ob.Magnitude2,"-0.0")
    case 8
      vtitle="Separation"
      if ob.Separation>0.0 then vvalue=format(ob.Separation,"0.0")+""""
    case 9
      vtitle="Pos. Angle"
      if ob.PosAngle<>0 then vvalue=str(ob.PosAngle)
    case 10
      vtitle="Size"
      vvalue=ob.Size
    case 11
      vtitle="Period"
      if ob.Period>0.0 then vvalue=format(ob.Period,"0.0")
    case 12
      vtitle="Spectral"
      vvalue=ob.Spectral
    case 13
      vtitle="Chart"
      vvalue=ob.Chart
    case 14
      vtitle="Difficulty"
      if ob.DifficultyIndex<>0.0 then vvalue=format(ob.DifficultyIndex,"-0")
    case 15
      vtitle="Lord's Rating"
      vvalue=ob.LordRating
    case 16
      vtitle="ODM"
      if ob.ODM<>0.0 then vvalue=format(ob.ODM,"-0")
    case 17
      vtitle="SB"
      if ob.SurfaceBrightness<>0.0 then vvalue=format(ob.SurfaceBrightness,"-0.0")
    else
			dim uf as APUserField = Plan().UserFieldDefinition(j-17)
			vtitle = uf.Title
			vvalue = ob.UserField(uf.Title).Value
    end select
  
    if row>t.RowCount then
      t.AddRow
      t.AddRow
    end if
  
    t.Cell(row,col)=vtitle
    t.Cell(row+1,col)=vvalue
  
    if col=1 then 
      t.RowStyle(row)=Table.style_Bold+Table.style_Inverted+Table.style_Gray
      if row=1 then
        t.RowHeight(row+1)=200.0
      else
        t.RowHeight(row+1)=120.0
      end if
    end if

    if col=ncols then 
      row=row+2
      col=1
    else
      col=col+1
    end if
  next
  
  // Render the object data table
  w=c.Width
  y=c.DrawTable(t,0,y,w,c.Height-y,Table.grid_Thin)
  t.Close

  //Add a notes section to the bottom
  t=new Table(2,1)
  t.ColumnJustify(1)=Table.justify_Left+Table.justify_VCenter
  t.RowStyle(1)=Table.style_Bold+Table.style_Inverted+Table.style_Gray
  t.RowHeight(2)=250.0
  t.Cell(1,1)="Notes"
  t.Cell(2,1)=ob.Notes
  y=c.DrawTable(t,0,y,w,c.Height-y,Table.grid_Thin)
  t.Close

  // Create the blank observation form table
  ncols=6

  t=new Table(4,ncols,"Observation")

  row=1
  col=1
  for j=0 to 11
    select case j
    case 0
      vtitle="Date/Time"
    case 1
      vtitle="Site"
    case 2
      vtitle="Telescope"
    case 3
      vtitle="Eyepiece"
    case 4
      vtitle="Filter"
    case 5
      vtitle="Obs. Aid"
    case 6
      vtitle="User A"
    case 7
      vtitle="User B"
    case 8
      vtitle="Seeing"
    case 9
      vtitle="Transparency"
    else
      vtitle=""
    end select
    
    if vtitle<>"" then
      t.Cell(row,col)=vtitle
    else
      t.CellStyle(row,col)=Table.style_Gray
    end if
   
    if col=1 then 
      t.RowStyle(row)=Table.style_Bold+Table.style_Inverted+Table.style_Gray
      t.RowHeight(row+1)=200.0
    end if

    if col=ncols then 
      row=row+2
      col=1
    else
      col=col+1
    end if
  next
 
  // Create the Notes field for the bottom
  tNotes=new Table(2,1)
  tNotes.ColumnJustify(1)=Table.justify_Left+Table.justify_VCenter
  tNotes.RowStyle(1)=Table.style_Bold+Table.style_Inverted+Table.style_Gray
  tNotes.RowHeight(2)=-1.0
  tNotes.Cell(1,1)="Notes"

  // Render a bunch of copies of the table, spread over the rest of the page
  obsTableHeight=(c.Height-y)\nObsTable
  for iObs=1 to nObsTable
    y=y+20
    ytop=y
    y=c.DrawTable(t,0,y,w,ObsTableHeight-20,Table.grid_Thin)
    y=c.DrawTable(tNotes,0,y,w,ObsTableHeight-20-(y-ytop),Table.grid_Thin)
  next

  t.Close
  tNotes.Close
end sub

//------------------------------------------------------------------
sub PrintCharts(c as Canvas, page as integer, ob as APPlanObject)  
  // Print charts page

  dim extra,ctitle,s as string
  dim j,y,size,x1,x2,x,gap,nimages,n as integer
  dim d as double
  
  if pagedate then
    if obsform then
      extra="a"
    else
      extra=""
    end if
    PageNumbering(c,page,extra)
    y=1.5*c.Textheight
  else
    y=0
  end if
  
  // Select object in list
  ob.Selected=true
  size=c.Width\2-15
  y=y+c.TextHeight
  x1=0
  x2=c.Width-size
  c.Target(ob)
    
  // Draw the sky chart
  s=ob.ID+"  "+ob.Name+ _
     "   RA: "+ob.RAFormatted+" Dec: "+ob.DecFormatted
  if c.TextWidth(s)>size then
    s=ob.ID+ _
     "   RA: "+ob.RAFormatted+" Dec: "+ob.DecFormatted
  end if
  c.DrawSky x1,y,size,isPrinting,s

  // Draw d1 degree FOV
  if d1=0.0 then
    d=c.Target(ob.Constellation,ob.RA,ob.Dec)
    c.FOVCircle(str(d2)+"°",d2,ob.RA,ob.Dec)
    ctitle="Constellation: "+ob.Constellation+"    FOV: "+ _
       format(d,"0.0")+"°"
  else
    d=d1
    c.FOVCircle(str(d2)+"°",d2)
    ctitle="FOV: "+str(d)+"°"
  end if
  c.FOVSize(d)
        
  c.FOVCatalog("",false,false)
  c.FOVCatalog("Bright",true,true)
  c.FOVMagnitudeLimits(6,2,0,0)
  c.FOVOption(Canvas.fovopt_Constellations_Borders,true)
  c.DrawFOV x2,y,size,isPrinting,ctitle
      
  y=y+size+1.5*c.TextHeight
   
  // Draw d2 degree FOV
  c.Target(ob)
  c.FOVSize(d2)
  c.FOVCircle(str(d3)+"°",d3)
  c.FOVMagnitudeLimits(9,5,9,9)
  c.FOVCatalog("",false,false)
  c.FOVCatalog("All-Sky",true,true)
  c.FOVOption(Canvas.fovopt_Constellations_Borders,false)
  c.DrawFOV x1,y,size,isPrinting,"FOV: "+str(d2)+"°"
        
  // Draw d3 degree FOV
  c.FOVSize(d3)
  c.FOVCatalog("",false,false)
  c.FOVCatalog("Hubble GSC",true,true)
  c.FOVMagnitudeLimits(16,7,15,15)
  c.DrawFOV x2,y,size,isPrinting,"FOV: "+str(d3)+"°"
    
  // Draw DSS images and drawing templates
  if dss or template then
    y=y+size+1.5*c.TextHeight
    size=c.Height-y
    if size>0.13*c.Height then
      n=c.Width\(size+0.01*c.Width)
      if dss then
        nimages=c.ImageCount(true)
      else
        nimages=0
      end if
      if nimages>n then nimages=n
      x=0
      gap=(c.Width-n*size)\(n-1)
      for j=1 to n
        if j<=nimages then
          c.DrawImage(j,true,x,y,size,isPrinting,isPrinting,true)
        elseif template then
          c.ForeColor(0,0,0)
          c.DrawRectangle(x,y,size,size)
          c.DrawOval(x+5,y+5,size-10,size-10)
        end if
        x=x+size+gap
      next
    end if
  end if
end sub

sub main()
	//------------------------------------------------------------------
	// Main program

	dim c as Canvas, i,page as integer
	dim doit as boolean

	// Restore saved parameters from plan document, defaulting the first time

	what = Plan().RestoreValue("what",2)
	isPrinting = Plan().RestoreValue("isPrinting",false)
	d1 = Plan().RestoreValue("d1",0.0)
	d2 = Plan().RestoreValue("d2",5.0)
	d3 = Plan().RestoreValue("d3",1.0)
	wtitle = Plan().RestoreValue("wtitle","Chart Example")
	w = Plan().RestoreValue("w",1100)
	h = Plan().RestoreValue("h",1500)
	dss = Plan().RestoreValue("dss",true)
	template = Plan().RestoreValue("template",true)
	pagedate = Plan().RestoreValue("pagedate",true)
	obsform = Plan().RestoreValue("obsform",true)
	charts = Plan().RestoreValue("charts",true)

	// Get values using a dialog
	
	dim dlg as new Dialog
	dlg.BooleanParameter("Print",isPrinting)
	dlg.ChoiceParameter("What to print/display:",what, _
	  "All "+str(Plan().nObj)+" objects", _
	  "Highlighted objects only", _
	  "Selected object only")
	dlg.DoubleParameter("FOV diameter 1 (degrees) (0 for constellation)",d1,0.0,60.0)
	dlg.DoubleParameter("FOV diameter 2 (degrees)",d2,0.1,60.0)
	dlg.DoubleParameter("FOV diameter 3 (degrees)",d3,0.1,60.0)
	dlg.StringParameter("Chart window title",wtitle)
	dlg.IntegerParameter("Display image width",w,100,3000)
	dlg.IntegerParameter("Display image height",h,100,3000)
	dlg.BooleanParameter("Display DSS/user images",dss)
	dlg.BooleanParameter("Display drawing templates",template)
	dlg.BooleanParameter("Date/time and page numbers",pagedate)
	dlg.BooleanParameter("Include charts page",charts)
	dlg.BooleanParameter("Include observing form page",obsform)

	If dlg.Show("Print Finder Charts") then
	  isPrinting = dlg.BooleanParameter("Print")
	  what = dlg.ChoiceParameter("What to print/display:")
	  d1 = dlg.DoubleParameter("FOV diameter 1 (degrees)")
	  d2 = dlg.DoubleParameter("FOV diameter 2 (degrees)")
	  d3 = dlg.DoubleParameter("FOV diameter 3 (degrees)")
	  wtitle = dlg.StringParameter("Chart window title")
	  w = dlg.IntegerParameter("Display image width")
	  h = dlg.IntegerParameter("Display image height")
	  dss = dlg.BooleanParameter("Display DSS/user images")
	  template = dlg.BooleanParameter("Display drawing templates")
	  pagedate = dlg.BooleanParameter("Date/time and page numbers")
	  charts = dlg.BooleanParameter("Include charts page")
	  obsform = dlg.BooleanParameter("Include observing form page")
  
	  if not charts and not obsform then
	    Print "Nothing to print/display!"
	    return
	  end if
  
	  // Open a new printer document (or display window)
	  if isPrinting then
	    c=new Canvas(false)
	  else
	    c=new Canvas(w,h,Plan(),wtitle)
	  end if
	  if not c.Cancelled then
    
	    // For each object in the list
	    page=0
	    for i=1 to Plan().nObj
	    	dim ob as APPlanObject = Plan().Obj(i)
	      select case what
	      case 0 // All objects
	        doit=true
	      case 1 // Highlighted objects
	        doit=ob.IsHighlighted
	      case 2 // Selected
	        doit=ob.Selected
	      end select
	      if doit then // Object selected to be processed
	        c.TextFont("Times",12)
        
	        page=page+1
	        if charts then 
	          if page>1 then c.NewPage
	          PrintCharts(c,page,ob)
	        end if
	        if obsform then 
	          if page>1 or charts then c.NewPage
	          PrintObsForm(c,page,ob)
	        end if
	      end if
	      if UserAbort then exit
	    next
	    c.Close
	  end if
  
	  // Save parameters back to plan document
	  Plan().SaveValue("what",what)
	  Plan().SaveValue("isPrinting",isPrinting)
	  Plan().SaveValue("d1",d1)
	  Plan().SaveValue("d2",d2)
	  Plan().SaveValue("d3",d3)
	  Plan().SaveValue("wtitle",wtitle)
	  Plan().SaveValue("w",w)
	  Plan().SaveValue("h",h)
	  Plan().SaveValue("dss",dss)
	  Plan().SaveValue("template",template)
	  Plan().SaveValue("pagedate",pagedate)
	  Plan().SaveValue("obsform",obsform)
	  Plan().SaveValue("charts",charts)
	end if
end sub

APSF2,V1,0,,-1,0,
//# Author: Paul Rodman
//# E-Mail: paul@ilanga.com
//# URL:
//# Name: Print Observations
//# Category: Reports
//# MinVersion: 2.0
//# Keywords:
//- This is the "Default" printing script. When in doubt use the "Default" option for printing, since
//- This script might be out-of-date.
//- This script current as of: AP V2.0b105
//-------------------------------------------------------------------------------------------------
class MyPrinterCanvas
  inherits PrinterCanvas
  
  dim sessions(-1) as APSession
  dim obsIDs(-1) as string
  dim nobsIDs(-1) as integer
  
  function GetHeaderItem(item as string) as string
    return GetFooterItem(item)
  end function

  function GetFooterItem(item as string) as string
    select case item
    case "Session Name/s"
    	dim s(-1) as string
    	for i as integer = 0 to ubound(sessions)
    		s.Append sessions(i).Name
    	next
    	if s.Ubound>5 then
    		while s.Ubound>5
    			s.Remove s.Ubound-1
    		wend
    		s.Insert s.Ubound,"..."
    	end if
    	return Join(s,"; ")
    case "Session Start Date/s"
    	dim s(-1) as string    	
    	for i as integer = 0 to ubound(sessions)
    		dim d as new Date(sessions(i).Start)
    		s.Append d.ShortDate
    	next
    	if s.Ubound>10 then
    		while s.Ubound>10
    			s.Remove s.Ubound-1
    		wend
    		s.Insert s.Ubound,"..."
    	end if
    	return Join(s,"; ")
    case "Session Start Date-Time/s"
    	dim s(-1) as string
    	for i as integer = 0 to ubound(sessions)
    		dim d as new Date(sessions(i).Start)
    		s.Append d.ShortDate+" "+d.ShortTime
    	next
    	if s.Ubound>5 then
    		while s.Ubound>5
    			s.Remove s.Ubound-1
    		wend
    		s.Insert s.Ubound,"..."
    	end if
    	return Join(s,"; ")
    case "Observation ID/s"
    	dim s,prefix as string
      prefix="&^T&^T&^T"
      for i as integer = 0 to ubound(obsIDs)
        dim a,b as string
        BreakupID(obsIDs(i),a,b)
        if a<>prefix then
          if s<>"" then s=s+"; "
          s=s+obsIDs(i)
          prefix=a
        else
          s=s+","+b
        end if
        if nobsIDs(i)>1 then s=s+"(x"+str(nobsIDs(i))+")"
      next
      redim obsIDs(-1)
      return s
    else
      return "Undefined H/F"
    end select
  end function  
  
  sub ResetHF()
  	redim sessions(-1)
  	redim obsIDs(-1)
  	redim nObsIDs(-1)
  end sub
  
  sub AddObsID(id as string)
  	dim i as integer = obsIDs.IndexOf(id)
  	if i<0 then
  		obsIDs.Append ID
  		nObsIDs.Append 1
  	else
  		nObsIDs(i)=nObsIDs(i)+1
  	end if
  end sub
  
  private sub BreakupID(id as string, byref a as string, byref b as string)
    if IsNumeric(id) then
      a=trim(id)
      b=""
      return
    end if
    for i as integer = 1 to len(id)
      if IsNumeric(mid(id,i,1)) then
        a=trim(left(id,i-1))
        b=trim(mid(id,i))
        return
      end if
    next
      a=trim(id)
      b=""  
  end sub
  
end class

//-------------------------------------------------------------------------------------------------
dim c as MyPrinterCanvas

//-------------------------------------------------------------------------------------------------
class CountDictionary
	inherits Dictionary
	
	sub Accumulate(v as Variant, n as integer = 1)
		if not HasKey(v) then Value(v)=n else Value(v)=Value(v)+n
	end sub
	
	function Counts(sorted as boolean = true) as Pair()
		dim v() as Variant = Keys
	  dim n as integer = Count-1
  
	  if sorted then
	    for j as integer = n-1 downto 0
	      dim swap as boolean = false
	      for i as integer = 0 to j
	        if v(i)>v(i+1) then
	          dim vtemp as Variant = v(i)
	          v(i)=v(i+1)
	          v(i+1)=vtemp
	          swap=true
	        end if
	      next
	      if not swap then exit
	    next
	  end if
  
	  dim p(-1) as Pair
	  redim p(n)
	  for i as integer = 0 to n
	    p(i)=new Pair(v(i),Value(v(i)))
	  next
  
	  return p
  
	end function
end class

//-------------------------------------------------------------------------------------------------
class TableCollection
  private dim tbl() as Table
  private dim tblhdr() as Table
  
  private dim fldNames() as string
  private dim fldValues() as string
  private dim fldWidth() as integer
  private dim fldRow() as integer
  private dim fldColumn() as integer
  private dim rowcount() as integer
  private dim colcount() as integer
  private dim width as integer
  private dim row as integer
  private dim compressed as boolean
  private dim lastrow as integer
  private dim grid as integer
  private dim seq as integer
  private dim hpad as integer
  private dim vpad as integer
  private dim maxcolwidth as integer
  
  //============================================================
  sub Constructor(fnames() as string, obs() as APObservation)
    dim i as integer
    redim fldNames(ubound(fnames))
    redim fldValues(ubound(fldNames))
    redim fldWidth(ubound(fldNames))
    for i=0 to ubound(fnames)
      fldNames(i)=fnames(i)
    next
    RearrangeResourceFields
    
    if c.OptionChecked("Grid") then grid=Canvas.grid_Thin else grid=Canvas.grid_None
    c.TablePadding(grid,hpad,vpad)
    
    maxcolwidth = val(c.OptionValue("MaxColWidth"))*c.Width*0.01
    MeasureFieldWidthsObservation(nil)
    for i=0 to ubound(obs)
      MeasureFieldWidthsObservation(obs(i))
    next
    ConstructRowsAndColumns
    redim tbl(row)
    
    compressed = c.OptionChecked("Compressed")
    if compressed then 
      redim tblhdr(row)
      if c.OptionIncludes("Compressed","Multi-line") then lastrow=row else lastrow=0
    else
      lastrow=row
    end if

    SetupTables("ObsHeadings")
    ComputeTableRowWidths
  end sub
  
  //============================================================
  sub Constructor(fnames() as string, sess() as APSession)
    dim i as integer
    redim fldNames(ubound(fnames))
    redim fldValues(ubound(fldNames))
    redim fldWidth(ubound(fldNames))
    for i=0 to ubound(fnames)
      fldNames(i)=fnames(i)
    next
    if c.OptionChecked("Grid") then grid=Canvas.grid_Thin else grid=Canvas.grid_None
    c.TablePadding(grid,hpad,vpad)
    
    maxcolwidth = val(c.OptionValue("MaxColWidth"))*c.Width*0.01
    MeasureFieldWidthsSession(nil)
    for i=0 to ubound(sess)
      MeasureFieldWidthsSession(sess(i))
    next
    ConstructRowsAndColumns
    redim tbl(row)
   
    compressed = c.OptionChecked("Compressed")
    if compressed then 
      redim tblhdr(row)
      if c.OptionIncludes("Compressed","Multi-line") then lastrow=row else lastrow=0
    else
      lastrow=row
    end if

    SetupTables("SessHeadings")
    ComputeTableRowWidths
  end sub
  
  //============================================================
  sub Constructor(fnames() as string, headingstyle as string)
    dim i as integer
    redim fldNames(ubound(fnames))
    redim fldValues(ubound(fldNames))
    redim fldWidth(ubound(fldNames))
    for i=0 to ubound(fnames)
      fldNames(i)=fnames(i)
    next
    maxcolwidth = val(c.OptionValue("MaxColWidth"))*c.Width*0.01
    MeasureFieldWidths
    ConstructRowsAndColumns
    redim tbl(row)
    compressed = c.OptionChecked("Compressed")
    if compressed then 
      redim tblhdr(row)
      if c.OptionIncludes("Compressed","Multi-line") then lastrow=row else lastrow=0
    else
      lastrow=row
    end if
    SetupTables(headingstyle)
    ComputeTableRowWidths
    if c.OptionChecked("Grid") then grid=Canvas.grid_Thin else grid=Canvas.grid_None
    seq=val(c.OptionValue("StartSequence"))
  end sub
  
  //============================================================
  sub Close()
    dim i as integer
    for i=0 to ubound(tbl)
      tbl(i).Close
    next
    for i=0 to ubound(tblhdr)
      tblhdr(i).Close
    next
  end sub
  
  //============================================================
  private sub RearrangeResourceFields()
  	// Rearrange so that resource fields are at the end, or just before Notes
  	
  	// Extract all the Resource fields
  	dim rsrc(-1) as string
  	for i as integer = fldNames.Ubound downto 0
  		if IsResourceField(fldNames(i)) then
  			rsrc.Insert 0,fldNames(i)
  			fldNames.Remove i
  		end if
  	next
  	if rsrc.Ubound<0 then return // No resource fields
  	
  	// Find Notes field (if present)
  	dim iNotes as integer = fldNames.Ubound+1
  	for i as integer = 0 to fldNames.Ubound
  		if fldNames(i).Contains("Notes") then
  			iNotes=i
  			exit
  		end if
  	next
  	
  	// Move Resource fields to position before notes
  	for i as integer = 0 to rsrc.Ubound
  		fldNames.Insert iNotes+i,rsrc(i)
  	next
  end sub
  
  //============================================================
  private sub MeasureFieldWidths()
    // Measure maximum string width of each field

    dim i as integer, fld as string

    c.TextBold=true
    c.TextFont("Heading",0)
    
    for i=0 to ubound(fldNames)
      fld=fldNames(i)
      if c.HasOption("AbbrevHeadings") and c.OptionChecked("AbbrevHeadings") then fld=c.Abbreviate(fld)
      fldWidth(i)=min(max(c.TextWidth(fld)+hpad*2, c.Width*min(FormWidthForField(fld),1.0)),maxcolwidth)
    next
    c.TextBold=false
  end sub

  //============================================================
  private sub MeasureFieldWidthsObservation(obs as APObservation)
    // Measure maximum string width of each observation field

    dim i as integer, fld,v as string

		if obs=nil then
    	c.TextBold=true
    	c.TextFont("Heading",0)
		else
    	c.TextBold=false
    	c.TextFont("Body",0)
		end if

    for i=0 to ubound(fldNames)
      fld=fldNames(i)
      if instr(fld,"Notes")>0 or instr(fld,"Annotations")>0 then
        fldWidth(i)=c.Width
      else
        if obs=nil then
        	if c.HasOption("AbbrevHeadings") and c.OptionChecked("AbbrevHeadings") then fld=c.Abbreviate(fld)
          fldWidth(i)=min(c.TextWidth(fld)+hpad*2,maxcolwidth)
        else
          if IsResourceField(fld) then
            dim j as integer
            for j=1 to obs.nResources
              v=ObservationFieldValue(obs,fld,j)
              if v<>"None" and v<>"Unknown" and instr(v,"No ")<>1 then
                fldWidth(i)=min(max(fldWidth(i), c.TextWidth(v)+hpad*2),maxcolwidth)
              end if
            next
          else
            v=ObservationFieldValue(obs,fld)
            fldWidth(i)=min(max(fldWidth(i), c.TextWidth(v)+hpad*2),maxcolwidth)
          end if
        end if
      end if
    next
    c.TextBold=false
  end sub

  //============================================================
  private sub MeasureFieldWidthsSession(sess as APSession)
    // Measure maximum string width of each session field

    dim i as integer, fld,v as string

		if sess=nil then
    	c.TextBold=true
    	c.TextFont("Heading",0)
		else
    	c.TextBold=false
    	c.TextFont("Body",0)
		end if
  
    for i=0 to ubound(fldNames)
      fld=fldNames(i)
      if instr(fld,"Notes")>0 then
        fldWidth(i)=c.Width
      else
        if sess=nil then
        	if c.HasOption("AbbrevHeadings") and c.OptionChecked("AbbrevHeadings") then fld=c.Abbreviate(fld)
          fldWidth(i)=min(c.TextWidth(fld)+hpad*2,maxcolwidth)
        else
          v=SessionFieldValue(sess,fld)
          fldWidth(i)=min(max(fldWidth(i), c.TextWidth(v)+hpad*2),maxcolwidth)
        end if
      end if
    next
    c.TextBold=false
  end sub

  //============================================================
  private sub ConstructRowsAndColumns()
    dim col, i, pagew as integer
  
    pagew=c.Width
    redim fldRow(ubound(fldNames))
    redim fldColumn(ubound(fldNames))
    row=0
    col=0
    width=0
    dim firstRField as boolean = false
    dim nRField as integer = 0
    for i=0 to ubound(fldNames)
    	if IsResourceField(fldnames(i)) then 
    		nRField=nRField+1
    		firstRField=nRField=1
    	end if
      if fldWidth(i)>pagew then
        if i>0 then row=row+1
        fldRow(i)=row
        fldColumn(i)=0
        row=row+1
        col=0
        width=0
      elseif Width+fldWidth(i)>pagew or firstRField then
        row=row+1
        fldRow(i)=row
        fldColumn(i)=0
        width=fldWidth(i)
        col=1
      else
        width=width+fldWidth(i)
        fldRow(i)=row
        fldColumn(i)=col
        col=col+1
      end if
      firstRField=false
    next
    
    if col=0 then row=row-1 
    redim colcount(row)
    redim rowcount(row)
    for i=0 to ubound(fldRow)
      colcount(fldRow(i))=fldColumn(i)
      rowcount(fldRow(i))=1
    next
    i=fldNames.IndexOf("Telescope")
    if i>=0 then rowcount(fldRow(i))=4
  end sub
  
  //============================================================
  private sub SetupTables(headingstyle as string)
    dim i as integer
    for i=0 to row
      if compressed then
        tbl(i)=new Table(1,colcount(i)+1)
        tbl(i).RowFontName(1)="Body"
        tblhdr(i)=new Table(1,colcount(i)+1)
        tblhdr(i).RowStyle(1)=StyleSelected(headingstyle)
        tblhdr(i).RowFontName(1)="Heading"
      else
        tbl(i)=new Table(rowcount(i)+1,colcount(i)+1)
        tbl(i).RowStyle(1)=StyleSelected(headingstyle)
        tbl(i).RowFontName(1)="Heading"
        tbl(i).RowFontName(2)="Body"
      end if
    next
  end sub

  //============================================================
  private sub ComputeTableRowWidths()
    dim rowWidth(),i,r,col as integer
    redim rowWidth(row)
    for i=0 to ubound(fldNames)
      r=fldRow(i)
      rowWidth(r)=rowWidth(r)+fldWidth(i)
    next

    for i=0 to ubound(fldNames)
      r=fldRow(i)
      col=fldColumn(i)
      dim fld as string = fldNames(i)
      if c.HasOption("AbbrevHeadings") and c.OptionChecked("AbbrevHeadings") then fld=c.Abbreviate(fld)
      if compressed then
        tblhdr(r).Cell(1,col+1)=fld
        tblhdr(r).ColumnWidth(col+1)=fldWidth(i)/rowWidth(r)*100.0
      else
        tbl(r).Cell(1,col+1)=fld
      end if
      tbl(r).ColumnWidth(col+1)=fldWidth(i)/rowWidth(r)*100.0
    next
  end sub
  
  //============================================================
  function TopOfPage(ytop as integer) as integer
    // Call at the top of each page
    dim y,i as integer
    y=ytop
    if compressed then
      for i=0 to lastrow
        y=c.DrawTable(tblhdr(i),0,y,c.Width,c.Height-y,grid)
      next
    end if
    return y
  end function
  
  //============================================================
  sub AssignObservationValues(obs as APObservation)
    dim i,row,col,drow as integer
    if compressed then drow=1 else drow=2
    for i=0 to ubound(fldNames)
      row=fldRow(i)
      col=fldColumn(i)
      dim v as string
      if IsResourceField(fldNames(i)) then
        // Adjust # rows to reflect resource combo count
        dim j,n,incr as integer
        if compressed then 
        	n=obs.nResources 
        	incr=0
        else 
        	n=obs.nResources+1
        	incr=1
        end if
        while tbl(row).RowCount<n
          tbl(row).AddRow
        wend
        while tbl(row).RowCount>n
          tbl(row).DeleteRow(tbl(row).RowCount)
        wend
        for j=1 to obs.nResources
          v=ObservationFieldValue(obs,fldNames(i),j)
          if v="None" or v="Unknown" or instr(v,"No ")=1 then v=""
          tbl(row).Cell(j+incr,col+1)=v
        next
      else
        v=ObservationFieldValue(obs,fldNames(i))
        tbl(row).Cell(drow,col+1)=v
        if instr(fldNames(i),"Notes")>0 or instr(fldNames(i),"Annotations")>0 then tbl(row).RowHeight(drow)=round(c.TextHeight(v,c.Width)/c.TextHeight)*100.0
      end if
    next
  end sub
  
  //============================================================
  sub AssignSessionValues(sess as APSession)
    dim i,row,col,drow as integer
    if compressed then drow=1 else drow=2
    for i=0 to ubound(fldNames)
      row=fldRow(i)
      col=fldColumn(i)
      dim v as string
      v=SessionFieldValue(sess,fldNames(i))
      
      tbl(row).Cell(drow,col+1)=v
         
      if instr(fldNames(i),"Notes")>0 then tbl(row).RowHeight(drow)=round(c.TextHeight(v,c.Width)/c.TextHeight)*100.0
    next
  end sub
  
  //============================================================
  function TableHeight() as integer
    dim hgt,i as integer
    hgt=0
    for i=0 to ubound(tbl)
      hgt=hgt+c.TableHeight(tbl(i),c.Width,grid)
      if compressed and not c.OptionIncludes("Compressed","Multi-line") then exit
    next
    return hgt
  end function
  
  //============================================================
  function DrawTable(ytop as integer) as integer
    dim i,y as integer
    y=ytop
    for i=0 to lastrow
      y=c.DrawTable(tbl(i),0,y,c.Width,c.Height-y,grid)
    next
    return y
  end function
    
  //============================================================
  function DrawSeparator(y as integer) as integer
    if compressed and c.OptionIncludes("Compressed","separator lines") and grid=Canvas.grid_None then
      if c.OptionIncludes("Compressed","Multi-line") then
        c.DrawLine(0,y+c.TextHeight*0.5,c.Width,y+c.TextHeight*0.5)
      else
        c.DrawLine(0,y,c.Width,y)
      end if
    end if
    if not compressed or c.OptionIncludes("Compressed","Multi-line") then return y+c.TextHeight else return y
  end function
  
  //============================================================
  sub EnlargeDataField(fld as string, lines as integer)
    dim i,j as integer
    for i=0 to ubound(tbl)
      for j=1 to tbl(i).ColumnCount
        if tbl(i).Cell(1,j)=fld then tbl(i).RowHeight(2)=lines*100.0
      next
    next
  end sub
  
end class

//-------------------------------------------------------------------------------------------------
function SessionSelected(session as APSession) as boolean
  // Check the restrictions to see if this session is selected for printing
  dim restriction() as string = c.GetRestrictions
  if ubound(restriction)<0 then return true // No restrictions
  for i as integer = 0 to ubound(restriction)
    select case restriction(i)
    case "All" // Always selected
      return true
    case "Session Selected"
      if not session.Selected then return false
    case "Session Not Selected"
      if session.Selected then return false
    case "Session Displayed"
      if not session.Visible then return false
    case "Session Not Displayed"
      if session.Visible then return false
    end select
  next
  return true
end function

//-------------------------------------------------------------------------------------------------
function ObservationSelected(obs as APObservation) as boolean
  // Check the restrictions to see if this observation is selected for printing
  dim restriction() as string = c.GetRestrictions
  if ubound(restriction)<0 then return true // No restrictions
  for i as integer = 0 to ubound(restriction)
    select case restriction(i)
    case "All" // Always selected
      return true
    case "Observation Selected"
      if not obs.Selected then return false
    case "Observation Not Selected"
      if obs.Selected then return false
    case "Observation Displayed"
      if not obs.Visible then return false
    case "Observation Not Displayed"
      if obs.Visible then return false
    case "Observation Found"
      if not obs.Found then return false
    case "Observation Not Found"
      if obs.Found then return false
    end select
  next
  return true
end function

//-------------------------------------------------------------------------------------------------
function ObservationFieldValue(ob as APObservation, fld as string, idx as integer = 0) as string
  dim s as string
  s=ob.GetValueAsString(fld,idx).trim
  if s<>"???" then return s
  return "Unknown: "+fld
end function
  
//-------------------------------------------------------------------------------------------------
function SessionFieldValue(sess as APSession, fld as string) as string
  dim s as string
  s=sess.GetValueAsString(fld).trim
  if s<>"???" then return s
  return "Unknown: "+fld
end function
  
//-------------------------------------------------------------------------------------------------
function IsResourceField(fld as string) as boolean
  select case fld
  case "Telescope","Eyepiece","Optical Aid","Filter","Imager","Rating","Magnification","Actual FoV","Found"
    return true
  else
    return false
  end select
end function

//-------------------------------------------------------------------------------------------------
function FormWidthForField(fld as string) as double
  // Return the fraction of the page width to apply to blank form fields
  if instr(fld,"Notes")>0 or instr(fld,"Annotations")>0 then 
    return 4.0
  else
    if IsResourceField(fld) then
      return 1/6*0.9999
    else
      return 0.25
    end if
  end if
end function

//-------------------------------------------------------------------------------------------------
function StyleSelected(oname as string) as integer
  dim v as integer
  
  v=0
  if c.OptionIncludes(oname,"Bold") then v=v+Table.style_Bold
  if c.OptionIncludes(oname,"Italic") then v=v+Table.style_Italic
  if c.OptionIncludes(oname,"Underline") then v=v+Table.style_Underline
  if c.OptionIncludes(oname,"Inverted") then v=v+Table.style_Inverted
  if c.OptionIncludes(oname,"Grey") then v=v+Table.style_Gray
  
  return v
end function

//-------------------------------------------------------------------------------------------------
sub DrawImages(ytop as integer, doImages as boolean, doSatellites as boolean, doConstellation as boolean)
  dim n,perRow,i,w,x,slop as integer
  dim y as integer
  if doImages then n = c.ImageCount(doSatellites) else n = 0
  if doConstellation then n=n+1
  if n<=0 then return
  slop=c.TextHeight*1.2
  y=ytop+slop
  if c.Width>c.Height then perRow=4 else perRow=3
  w=(c.Width-(perRow-1)*slop)/perRow
  x=0
  for i=1 to n
  	if i=n and doConstellation then
  		c.DrawConstellation(x,y,w,w,"",-999.0,-999.0,c.OptionIncludes("ConstellationChart","Black-on-white"))
  	else
    	c.DrawImage(i,doSatellites,x,y,w,c.OptionIncludes("Images","Black-on-white"),c.OptionIncludes("Images","Grey-scale"))
  	end if
    if (i mod perRow)=0 then
      x=0
      y=y+w+slop
    else
      x=x+w+slop
    end if
  next
end sub
  
//-------------------------------------------------------------------------------------------------
function ImagesHeight(doImages as boolean, doSatellites as boolean, doConstellation as boolean) as integer
  dim n,perRow,w,slop as integer
  if doImages then n = c.ImageCount(doSatellites) else n = 0
  if doConstellation then n=n+1
  if n<=0 then return 0
  if c.Width>c.Height then perRow=4 else perRow=3
  slop=c.TextHeight*1.2
  w=(c.Width-(perRow-1)*slop)/perRow
  if (n mod perRow)=0 then return (n\perRow)*(w+slop) else return (n\perRow+1)*(w+slop)
end function

//-------------------------------------------------------------------------------------------------
function DrawingTemplates(yfrom as integer, diam as integer) as integer
  dim n,x,xdelta as integer
  
  select case c.OptionValue("TemplateBackground")
  case "Black"
    c.FillRectangle(0,yfrom,c.Width,diam+c.TextHeight)
  case "Grey"
    c.ForeColor(127,127,127)
    c.FillRectangle(0,yfrom,c.Width,diam+c.TextHeight)
    c.ForeColor(0,0,0)
  else
    c.DrawRectangle(0,yfrom,c.Width,diam+c.TextHeight)
  end select
    
  n=(c.Width-c.TextHeight)\diam
  if n>1 then xdelta=diam+(c.Width-c.TextHeight-n*diam)/(n-1) else xdelta=0
  x=c.TextHeight\2
  for i as integer = 1 to n
    select case c.OptionValue("TemplateBackground")
    case "Black","Grey"
      c.ForeColor(255,255,255)
      c.FillOval(x,yfrom+c.TextHeight\2,diam,diam)
      c.ForeColor(0,0,0)
    else
      c.DrawOval(x,yfrom+c.TextHeight\2,diam,diam)
    end select
    x=x+xdelta
  next
  return yfrom+diam+c.TextHeight
end function

//-------------------------------------------------------------------------------------------------
dim attachments(-1),nPerRow,imageSize as integer

//-------------------------------------------------------------------------------------------------
function ObsImageHeight(obs as APObservation, doImages as boolean, doConstellation as boolean) as integer
  dim i,n as integer, path as string
  redim attachments(-1)
  if doImages then
  	for i=1 to obs.nAttachments
    	path=obs.Attachment(i).Path
    	if right(path,4)=".jpg" or right(path,5)=".jpeg" then attachments.Append i
  	next
  	n=ubound(attachments)+1
  else
  	n = 0
  end if
  if doConstellation then n=n+1
  if n<=0 then return 0
  nPerRow=val(c.OptionValue("ObsImagesPerRow"))
  imageSize=(c.Width-(nPerRow-1)*(c.TextHeight\2))\nPerRow
  dim nRows as integer
  nRows=n\nPerRow
  if (n mod nPerRow) <> 0 then nRows=nRows+1
  return nRows*(imageSize+c.TextHeight)+(nRows-1)*c.TextHeight\2
end function

//-------------------------------------------------------------------------------------------------
function DrawObsImages(obs as APObservation, yfrom as integer, doImages as boolean, doConstellation as boolean) as integer
  dim i,n,x,y as integer
  y=yfrom
  x=0
  if doImages then n=ubound(attachments) else n = -1
  
  if doConstellation then n=n+1
  	
  for i=0 to n
  	if doConstellation and i=n then
  		c.DrawConstellation(x,y,imageSize,imageSize,obs.Constellation,obs.RA,obs.Dec,c.OptionIncludes("ConstellationChart","Black-on-white"))
  	else
    	c.DrawImage(obs.Attachment(attachments(i)).Path, x, y+c.TextHeight, imagesize, imagesize, _
      	c.OptionIncludes("ObsImages","Black-on-white"),c.OptionIncludes("ObsImages","Grey-scale"), _
      	true, obs.Attachment(attachments(i)).Description)
  	end if

    if (i+1) mod nPerRow=0 then
      x=0
      y=y+imagesize+c.TextHeight+c.TextHeight\2
    else
      x=x+imagesize+c.TextHeight\2
    end if
  next
  if x=0 then return y else return y+imagesize+c.TextHeight+c.TextHeight\2
end function

//-------------------------------------------------------------------------------------------------
sub DrawStatsTable(title as string, col1() as string, col2() as string, col3() as string, style() as integer)
	dim y as integer = 0
	dim rowwidthA as integer = c.TextWidth(title)
	dim rowwidthB as integer = c.TextWidth("# of Observations")*1.2
	dim rowwidthC as integer = c.TextWidth("% of Observations")*1.2
	dim s as string
	const slop = 1.5
	
	for row as integer = 0 to ubound(col1)
		rowwidthA=max(rowwidthA,c.TextWidth(col1(row)))
	next
	rowwidthA=rowwidthA*1.1
	
	for row as integer = 0 to ubound(col1)
		if (style(row) and 4)<>0 then y = y +c.TextHeight*0.5
		if row=0 or y>c.Height-c.TextHeight then
			c.NewPage
  		c.ResetHF
  		y=0
  		
  		// Headings
  		c.TextBold=true
  		c.DrawText(title,0,y)
  		s="# of Observations"
  		c.DrawText(s,rowwidthA+(rowWidthB-c.TextWidth(s))\2,y)
  		s="% of Observations"
  		c.DrawText(s,rowwidthA+rowwidthB+(rowWidthC-c.TextWidth(s))\2,y)
  		c.TextBold=false
  		y = y + c.TextHeight*2
		end if
		
		// Body line
		c.TextBold = (style(row) and 1)<>0
		s=col1(row)
		if (style(row) and 2)<>0 then
			c.DrawText(s,rowwidthA-c.TextWidth(s),y)
		else
			c.DrawText(s,0,y)
		end if
		c.TextBold = false
		s=col2(row)
		c.DrawText(s,rowwidthA+(rowWidthB-c.TextWidth(s))\2,y)
		s=col3(row)
		c.DrawText(s,rowwidthA+rowwidthB+(rowWidthC-c.TextWidth(s))\2,y)
		
		y = y + c.TextHeight(col1(row),rowwidthA) + c.TextHeight*(slop-1.0)
	next

end sub

//-------------------------------------------------------------------------------------------------
sub SessionStats(sessions() as APSession)
	dim nobs as integer = 0
	dim d as new CountDictionary
	dim p() as Pair
	dim description(-1),number(-1),percentage(-1) as string, style(-1) as integer
	
	for ktype as integer = 0 to 4
    d.Clear
    dim ss as string
    for i as integer = 0 to ubound(sessions)
      dim sess as APSession = sessions(i)
      select case ktype
      case 0
        ss=sess.Site
      case 1
      	dim dt as new Date(sess.Start)
        ss=str(dt.Year)
      case 2
        ss=sess.Observer
      case 3
        ss=sess.Seeing
      case 4
        ss=sess.Transparency
      end select
      if ss="" then ss="Unknown"
      d.Accumulate(ss,sess.nObservations)
      if ktype=0 then nobs=nobs+sess.nObservations
    next
    
    p = d.Counts
    if p.Ubound>=0 then
      select case ktype
      case 0
        ss="Observing Site"
      case 1
        ss="Year"
      case 2
        ss="Observer"
      case 3
        ss="Seeing"
      case 4
        ss="Transparency"
      end select
      
      description.Append ss
      number.Append ""
      percentage.Append ""
      style.Append 1+4
      
      for i as integer = 0 to ubound(p)
      	description.Append p(i).Left
      	number.Append format(p(i).Right,",0")
      	percentage.Append format(p(i).Right/nobs*100.0,"0.0")
      	style.Append 2
      next
    end if
  next
  
  description.Insert 0,"Total observations"
  number.Insert 0,format(nobs,",0")
  percentage.Insert 0,""
  style.Insert 0,1
  
  description.Insert 0,"Total sessions"
  number.Insert 0,format(ubound(sessions)+1,",0")
  percentage.Insert 0,""
  style.Insert 0,1

  DrawStatsTable("Session Statistics",description,number,percentage,style)
end sub

//-------------------------------------------------------------------------------------------------
sub ObservationStats(observations() as APObservation)
	dim nobs as integer = ubound(observations)+1
	dim d as new CountDictionary
	dim p() as Pair
	dim description(-1),number(-1),percentage(-1),choices(-1),s as string, style(-1) as integer
	
	for ktype as integer = 0 to 6
		d.Clear
		for i as integer = 0 to ubound(observations)
			select case ktype
			case 0 // Type
		  	dim types(0) as string
	    	if observations(i).Type="" then types(0)="Unknown" else types=Split(observations(i).Type,"+")
	    	for j as integer = 0 to types.Ubound
	      	d.Accumulate(types(j))
	    	next
			else
				redim choices(-1)
				for j as integer = 1 to observations(i).nResources
					select case ktype
					case 1 // Rating
						s=observations(i).RatingString(j)
					case 2 // Telescope
						s=observations(i).Telescope(j)
					case 3 // Eyepiece
						s=observations(i).Eyepiece(j)
					case 4 // Imager
						s=observations(i).Imager(j)
					case 5 // Optical Aid
						s=observations(i).OpticalAid(j)
					case 6 // Filter
						s=observations(i).Filter(j)
					end select
					if s<>"" and choices.IndexOf(s)<0 then choices.Append s
				next
				for j as integer = 0 to ubound(choices)
					d.Accumulate(choices(j))
				next
			end select
	  next
	  p = d.Counts
	  if p.Ubound>=0 then
	  	select case ktype
	  	case 0
	    	description.Append "Object Type"
	  	case 1
	    	description.Append "Rating"
	  	case 2
	    	description.Append "Telescope"
	  	case 3
	    	description.Append "Eyepiece"
	  	case 4
	    	description.Append "Imager"
	  	case 5
	    	description.Append "Optical Aid"
	  	case 6
	    	description.Append "Filter"
	  	end select
	    number.Append ""
	    percentage.Append ""
	    style.Append 1+4
    
	    for i as integer = 0 to ubound(p)
	    	description.Append p(i).Left
	    	number.Append format(p(i).Right,",0")
	    	percentage.Append format(p(i).Right/nobs*100.0,"0.0")
	    	style.Append 2
	    next
	  end if
	next
	
  description.Insert 0,"Total observations"
  number.Insert 0,format(nobs,",0")
  percentage.Insert 0,""
  style.Insert 0,1
  
  DrawStatsTable("Observation Statistics",description,number,percentage,style)
end sub

//-------------------------------------------------------------------------------------------------
sub SessionsOnly()
	dim sessions() as APSession
	dim tsession as TableCollection
	dim fldsession() as string
	dim ssort() as double
	
	// Collect the sessions that survive the restrictions
	for isession as integer = 1 to APSession.Count
		dim session as APSession = APSession.Session(isession)
		if SessionSelected(session) then 
			sessions.Append session
			ssort.Append session.Start
		end if
	next
	
	if ubound(sessions)<0 then
	  c.Close(true)
	  print "No sessions selected for printing!"
	  return
	end if
	
	ssort.SortWith(sessions)
	
  // Get session fields
  fldsession=c.GetFields(2)
  
	if c.HasOption("AllBlankSession") and not c.OptionChecked("AllBlankSession") then
	  // Reject all fields that are blank in all sessions
	  for i as integer = ubound(fldsession) downto 0
	    dim found as boolean
	    found=false
	    for isession as integer = 0 to ubound(sessions)
	      dim s as string
	      s=sessions(isession).GetValueAsString(fldsession(i))
	      if s<>"" and s<>"???" then 
	        found=true
	        exit
	      end if
	    next
	    if not found then fldsession.Remove i
	  next
	end if

	if ubound(fldsession)<0 then
	  c.Close(true)
	  print "No session fields specified!"
	  return
	end if

	tsession=new TableCollection(fldsession,sessions)
	tsession.EnlargeDataField("Notes",FormWidthForField("Notes"))
	
	dim yincr as integer = 0
  dim hincr as integer = 0
	if not c.OptionChecked("Compressed") then
    yincr = 40
  elseif c.OptionIncludes("Compressed","Multi-line") then 
    yincr = 20
    hincr = 20
  end if

	dim y,hgt,n as integer
	y=0
	for isession as integer = 0 to ubound(sessions)
		if c.Aborted then exit
		dim session as APSession = sessions(isession)
  	if y=0 then y=tsession.TopOfPage(y)+hincr
  	tsession.AssignSessionValues(session)
  	hgt=tsession.TableHeight
    if (isession>0 and c.OptionChecked("PagePerSession")) or hgt>c.Height-y then
      y=0
      c.NewPage
      y=tsession.TopOfPage(y)+hincr
      c.ResetHF
    end if
    c.sessions.Append session
    y=tsession.DrawTable(y)+yincr
	next
	tsession.Close
	if not c.Aborted then
		if c.OptionChecked("SessionStats") and ubound(sessions)>0 then SessionStats(sessions)
	end if
end sub

//-------------------------------------------------------------------------------------------------
sub ObservationsOnly()
	dim observations() as APObservation
	dim tobservation as TableCollection
	dim fldobservation() as string
	dim ssort() as double
	
	// Collect the observations that survive the restrictions
	for iobs as integer = 1 to APObservation.Count
		dim obs as APObservation = APObservation.Observation(iobs)
		if ObservationSelected(obs) then 
			observations.Append obs
			ssort.append obs.LocalDateTime
		end if
	next
	
	if ubound(observations)<0 then
	  c.Close(true)
	  print "No observations selected for printing!"
	  return
	end if
	
	ssort.SortWith(observations)
	
  // Get observations fields
  fldobservation=c.GetFields(3)
  
	if c.HasOption("AllBlankObs") and not c.OptionChecked("AllBlankObs") then
	  // Reject all fields that are blank in all observations
	  for i as integer = ubound(fldobservation) downto 0
	    dim found as boolean
	    found=false
	    for iobs as integer = 0 to ubound(observations)
	      dim s as string
	      s=observations(iobs).GetValueAsString(fldobservation(i))
	      if s<>"" and s<>"???" then 
	        found=true
	        exit
	      end if
	    next
	    if not found then fldobservation.Remove i
	  next
	end if

	if ubound(fldobservation)<0 then
	  c.Close(true)
	  print "No observation fields specified!"
	  return
	end if

	tobservation=new TableCollection(fldobservation,observations)
	tobservation.EnlargeDataField("Notes",FormWidthForField("Notes"))
	tobservation.EnlargeDataField("Annotations",FormWidthForField("Annotations"))
	
	dim yincr as integer = 0
  dim hincr as integer = 0
	if not c.OptionChecked("Compressed") then
    yincr = 40
  elseif c.OptionIncludes("Compressed","Multi-line") then 
    yincr = 20
    hincr = 20
  end if

  dim y,hgt,n as integer
	y=0
	for iobs as integer = 0 to ubound(observations)
		if c.Aborted then exit
		dim obs as APObservation = observations(iobs)
		if y=0 then y=tobservation.TopOfPage(y)+hincr
		tobservation.AssignObservationValues(obs)
		hgt=tobservation.TableHeight
		if (iobs>0 and c.OptionChecked("PagePerObservation")) or hgt>c.Height-y then
			y=0
			c.NewPage
			y=tobservation.TopOfPage(y)+hincr
			c.ResetHF
		end if
		if obs.ID<>"" then c.AddObsID(obs.ID)
		y=tobservation.DrawTable(y)+yincr
		if c.OptionChecked("ObsImages") or c.OptionChecked("ConstellationChart") then
			hgt = ObsImageHeight(obs,c.OptionChecked("ObsImages"),c.OptionChecked("ConstellationChart"))
			if hgt>0 then
				if hgt>c.Height-y then
					y=0
					c.NewPage
				end if
				y=DrawObsImages(obs,y,c.OptionChecked("ObsImages"),c.OptionChecked("ConstellationChart"))
			end if
		end if
	next
	tobservation.Close
	if not c.Aborted then 
		if c.OptionChecked("ObservationStats") and ubound(observations)>0 then ObservationStats(observations)
	end if
end sub

//-------------------------------------------------------------------------------------------------
sub SessionsAndObservations()
	dim sessions() as APSession
	dim tsession as TableCollection
	dim fldsession() as string
	dim observations() as APObservation
	dim tobservation as TableCollection
	dim fldobservation() as string
  dim ssort() as double
  
	// Collect the sessions that survive the restrictions
	for isession as integer = 1 to APSession.Count
		dim session as APSession = APSession.Session(isession)
		if SessionSelected(session) then 
			sessions.Append session
			ssort.Append session.Start
		end if
	next
	
	if ubound(sessions)<0 then
	  c.Close(true)
	  print "No sessions selected for printing!"
	  return
	end if
	
	ssort.SortWith(sessions)

  // Get session fields
  fldsession=c.GetFields(2)
  
  // Collect the observations that survive the restrictions
  redim ssort(-1)
	for iobs as integer = 1 to APObservation.Count
		dim obs as APObservation = APObservation.Observation(iobs)
		if ObservationSelected(obs) then 
			observations.Append obs
			ssort.append obs.LocalDateTime
		end if
	next
	
	if ubound(observations)<0 then
	  c.Close(true)
	  print "No observations selected for printing!"
	  return
	end if
	
	ssort.SortWith(observations)
	
	fldobservation=c.GetFields(3)

	if c.HasOption("AllBlankSession") and not c.OptionChecked("AllBlankSession") then
	  // Reject all fields that are blank in all sessions
	  for i as integer = ubound(fldsession) downto 0
	    dim found as boolean
	    found=false
	    for isession as integer = 0 to ubound(sessions)
	      dim s as string
	      s=sessions(isession).GetValueAsString(fldsession(i))
	      if s<>"" and s<>"???" then 
	        found=true
	        exit
	      end if
	    next
	    if not found then fldsession.Remove i
	  next
	end if

	if ubound(fldsession)<0 then
	  c.Close(true)
	  print "No session fields specified!"
	  return
	end if

	if c.HasOption("AllBlankObs") and not c.OptionChecked("AllBlankObs") then
	  // Reject all fields that are blank in all observations
	  for i as integer = ubound(fldobservation) downto 0
	    dim found as boolean
	    found=false
	    for iobs as integer = 0 to ubound(observations)
	      dim s as string
	      s=observations(iobs).GetValueAsString(fldobservation(i))
	      if s<>"" and s<>"???" then 
	        found=true
	        exit
	      end if
	    next
	    if not found then fldobservation.Remove i
	  next
	end if

	if ubound(fldobservation)<0 then
	  c.Close(true)
	  print "No observation fields specified!"
	  return
	end if

	tsession=new TableCollection(fldsession,sessions)
	tsession.EnlargeDataField("Notes",FormWidthForField("Notes"))
	tobservation=new TableCollection(fldobservation,observations)
	tobservation.EnlargeDataField("Notes",FormWidthForField("Notes"))
	tobservation.EnlargeDataField("Annotations",FormWidthForField("Annotations"))
	
	dim y,hgt,n as integer
	y=0
	for isession as integer = 0 to ubound(sessions)
		if c.Aborted then exit
		dim session as APSession = sessions(isession)
		dim sobs(-1) as APObservation
		for iobs as integer = 0 to ubound(observations)
			if observations(iobs).LocalDateTime>=session.Start and observations(iobs).LocalDateTime<=session.Finish then
				sobs.Append observations(iobs)
			end if
		next
		if ubound(sobs)<0 and c.OptionChecked("SkipEmptySessions") then continue
		
  	if y=0 then y=tsession.TopOfPage(y)
  	tsession.AssignSessionValues(session)
  	hgt=tsession.TableHeight
    if (isession>0 and c.OptionChecked("PagePerSession")) or hgt>c.Height-y then
      y=0
      c.NewPage
      y=tsession.TopOfPage(y)
      c.ResetHF
    end if
    c.sessions.Append session
    y=tsession.DrawTable(y)+40
    
    if ubound(sobs)>=0 and c.OptionChecked("ObservationsOnNewPage") then
      y=0
      c.NewPage
      y=tobservation.TopOfPage(y)
    end if

		for iobs as integer = 0 to ubound(sobs)
			if c.Aborted then exit
			dim obs as APObservation = sobs(iobs)
	  	if y=0 then y=tobservation.TopOfPage(y)
	  	tobservation.AssignObservationValues(obs)
	  	hgt=tobservation.TableHeight
	    if (iobs>0 and c.OptionChecked("PagePerObservation")) or hgt>c.Height-y then
	      y=0
	      c.NewPage
	      y=tobservation.TopOfPage(y)
	      c.ResetHF
	      c.sessions.Append session
	    end if
	    if obs.ID<>"" then c.AddObsID(obs.ID)
  
	    y=tobservation.DrawTable(y)+40
	    if c.OptionChecked("ObsImages") or c.OptionChecked("ConstellationChart") then
	    	hgt = ObsImageHeight(obs,c.OptionChecked("ObsImages"),c.OptionChecked("ConstellationChart"))
	    	if hgt>0 then
	    		if hgt>c.Height-y then
	    			y=0
	      		c.NewPage
	    		end if
	    		y=DrawObsImages(obs,y,c.OptionChecked("ObsImages"),c.OptionChecked("ConstellationChart"))
	    	end if
	    end if
		next
	next
	tsession.Close
	tobservation.Close
	if not c.Aborted then
		if c.OptionChecked("SessionStats") and ubound(sessions)>0 then SessionStats(sessions)
		if c.OptionChecked("ObservationStats") and ubound(observations)>0 then ObservationStats(observations)
	end if
end sub

//-------------------------------------------------------------------------------------------------
sub main()
	c=new MyPrinterCanvas(true)

	if c.Cancelled then
	  c.Close(true)
	  return
	end if
	
	if c.GetTask="Sessions" then SessionsOnly

	if c.GetTask="Observations" then ObservationsOnly
	
	if c.GetTask="Sessions+Observations" then SessionsAndObservations

	c.Close
end sub

//-------------------------------------------------------------------------------------------------
// Print task definitions
//+ <root>
//+     <task name="Sessions" caption="Session data only">
//+         <header>
//+             <item> Session Name/s </item>
//+             <item checked="true"> Session Start Date/s </item>
//+             <item checked="false"> Session Start Date-Time/s </item>
//+         </header>
//+         <footer>
//+             <item> Session Name/s </item>
//+             <item> Session Start Date/s </item>
//+             <item> Session Start Date-Time/s </item>
//+         </footer>
//+         <restrictions>
//+             <item group="1" style="bold"> Session Selected </item>
//+             <item group="1"> Session Not Selected </item>
//+             <item group="2" style="bold"> Session Displayed </item>
//+             <item group="2"> Session Not Displayed </item>
//+         </restrictions>
//+         <fields2 caption="Session fields">
//+             <item> [session fields] </item>
//+         </fields2>
//+         <options>
//+             <option name="SessionStats" checkbox="true" caption="Session statistics" checked="false"/>
//+             <option name="PagePerSession" checkbox="true" caption="New page per session" checked="true"/>
//+             <option name="AllBlankSession" checkbox="true" caption="Include all-blank session fields" checked="true"/>
//+             <option name="Compressed" checkbox="true" caption="Compressed mode" checked="false"> 
//+                 <value type="Multi" default="3">
//+                     <multi> Multi-line </multi>
//+                     <multi> Separator lines </multi>
//+                 </value>
//+             </option>
//+             <option name="SessHeadingsSection" expand="true" caption="Headings">
//+               <option name="AbbrevHeadings" checkbox="true" caption="Use abbreviated headings" checked="false"/>
//+               <option name="SessHeadings" checkbox="false" caption="Session heading format">
//+                 <value type="Multi" default="Bold">
//+                     <multi> Bold </multi>
//+                     <multi> Italic </multi>
//+                     <multi> Underline </multi>
//+                     <multi> Inverted </multi>
//+                     <multi> Grey </multi>
//+                 </value>
//+               </option>
//+             </option>
//+             <option name="MaxColWidth" checkbox="false" caption="Maximum column width"> 
//+                 <value type="Integer" min="1" max="100" units="%" default="100"/>
//+             </option>
//+             <option name="MarkSelected" checkbox="true" caption="Mark selected session Names"> 
//+                 <value type="Multi" default="Bold">
//+                     <multi> Bold </multi>
//+                     <multi> Italic </multi>
//+                     <multi> Underline </multi>
//+                     <multi> Inverted </multi>
//+                     <multi> Grey </multi>
//+                 </value>
//+             </option>
//+             <option name="Grid" checkbox="true" caption="Grid lines" checked="true"/>
//+         </options>
//+     </task>

//+     <task name="Observations" caption="Observation data only">
//+         <header>
//+             <item checked="true"> Observation ID/s </item>
//+         </header>
//+         <footer>
//+             <item> Observation ID/s </item>
//+         </footer>
//+         <restrictions>
//+             <item group="1" style="bold"> Observation Selected </item>
//+             <item group="1"> Observation Not Selected </item>
//+             <item group="2" style="bold"> Observation Found </item>
//+             <item group="2"> Observation Not Found </item>
//+             <item group="3" style="bold"> Observation Displayed </item>
//+             <item group="3"> Observation Not Displayed </item>
//+         </restrictions>
//+         <fields3 caption="Observation fields">
//+             <item> [observation fields] </item>
//+         </fields3>
//+         <options>
//+             <option name="ObservationStats" checkbox="true" caption="Observation statistics" checked="false"/>
//+             <option name="PagePerObservation" checkbox="true" caption="New page per observation" checked="false"/>
//+             <option name="AllBlankObs" checkbox="true" caption="Include all-blank observation fields" checked="true"/>
//+             <option name="Compressed" checkbox="true" caption="Compressed mode" checked="false"> 
//+                 <value type="Multi" default="3">
//+                     <multi> Multi-line </multi>
//+                     <multi> Separator lines </multi>
//+                 </value>
//+             </option>
//+             <option name="MaxColWidth" checkbox="false" caption="Maximum column width"> 
//+                 <value type="Integer" min="1" max="100" units="%" default="100"/>
//+             </option>
//+             <option name="ObsHeadingsSection" expand="true" caption="Headings">
//+                <option name="AbbrevHeadings" checkbox="true" caption="Use abbreviated headings" checked="false"/>
//+                <option name="ObsHeadings" checkbox="false" caption="Observation heading format">
//+                 <value type="Multi" default="Bold">
//+                     <multi> Bold </multi>
//+                     <multi> Italic </multi>
//+                     <multi> Underline </multi>
//+                     <multi> Inverted </multi>
//+                     <multi> Grey </multi>
//+                 </value>
//+                </option>
//+             </option>
//+             <option name="MarkSelected" checkbox="true" caption="Mark selected observation IDs"> 
//+                 <value type="Multi" default="Bold">
//+                     <multi> Bold </multi>
//+                     <multi> Italic </multi>
//+                     <multi> Underline </multi>
//+                     <multi> Inverted </multi>
//+                     <multi> Grey </multi>
//+                 </value>
//+             </option>
//+             <option name="Grid" checkbox="true" caption="Grid lines" checked="true"/>
//+             <option name="ObsImageSection" expand="true" caption="Images and Charts">
//+               <option name="ObsImages" checkbox="true" caption="Show attached observation images"> 
//+                 <value type="Multi">
//+                     <multi init="printGS"> Grey-scale </multi>
//+                     <multi init="printBoW"> Black-on-white </multi>
//+                 </value>
//+               </option>
//+               <option name="ObsImagesPerRow" checkbox="false" caption="Number of attached images per row"> 
//+                 <value type="Integer" min="1" max="5" default="3" />
//+               </option>
//+               <option name="ConstellationChart" checkbox="true" caption="Show constellation chart"> 
//+                 <value type="Multi">
//+                     <multi init="printBoW"> Black-on-white </multi>
//+                 </value>
//+               </option>
//+             </option>
//+         </options>
//+     </task>

//+     <task name="Sessions+Observations" caption="Session and Observation data">
//+         <header>
//+             <item> Session Name/s </item>
//+             <item checked="true"> Session Start Date/s </item>
//+             <item checked="false"> Session Start Date-Time/s </item>
//+             <item> Observation ID/s </item>
//+         </header>
//+         <footer>
//+             <item> Session Name/s </item>
//+             <item> Session Start Date/s </item>
//+             <item> Session Start Date-Time/s </item>
//+             <item> Observation ID/s </item>
//+         </footer>
//+         <restrictions>
//+             <item group="1" style="bold"> Session Selected </item>
//+             <item group="1"> Session Not Selected </item>
//+             <item group="2" style="bold"> Session Displayed </item>
//+             <item group="2"> Session Not Displayed </item>
//+             <item group="3" style="bold"> Observation Selected </item>
//+             <item group="3"> Observation Not Selected </item>
//+             <item group="4" style="bold"> Observation Found </item>
//+             <item group="4"> Observation Not Found </item>
//+             <item group="5" style="bold"> Observation Displayed </item>
//+             <item group="5"> Observation Not Displayed </item>
//+         </restrictions>
//+         <fields2 caption="Session fields">
//+             <item> [session fields] </item>
//+         </fields2>
//+         <fields3 caption="Observation fields">
//+             <item> [observation fields] </item>
//+         </fields3>
//+         <options>
//+             <option name="Obs+SessSessionSection" expand="true" caption="Sessions">
//+               <option name="SessionStats" checkbox="true" caption="Session statistics" checked="false"/>
//+               <option name="PagePerSession" checkbox="true" caption="New page per session" checked="true"/>
//+               <option name="AllBlankSession" checkbox="true" caption="Include all-blank session fields" checked="true"/>
//+               <option name="SkipEmptySessions" checkbox="true" caption="Ignore sessions with no observations to print" checked="true"/>
//+               <option name="MarkSelected" checkbox="true" caption="Mark selected session Names"> 
//+                 <value type="Multi" default="Bold">
//+                     <multi> Bold </multi>
//+                     <multi> Italic </multi>
//+                     <multi> Underline </multi>
//+                     <multi> Inverted </multi>
//+                     <multi> Grey </multi>
//+                 </value>
//+               </option>
//+               <option name="SessHeadings" checkbox="false" caption="Session heading format">
//+                 <value type="Multi" default="Bold">
//+                     <multi> Bold </multi>
//+                     <multi> Italic </multi>
//+                     <multi> Underline </multi>
//+                     <multi> Inverted </multi>
//+                     <multi> Grey </multi>
//+                 </value>
//+               </option>
//+             </option>
//+             <option name="Obs+SessObsSection" expand="true" caption="Observations">
//+               <option name="ObservationStats" checkbox="true" caption="Observation statistics" checked="false"/>
//+               <option name="ObservationsOnNewPage" checkbox="true" caption="First observation of a session on a new page" checked="false"/>
//+               <option name="PagePerObservation" checkbox="true" caption="New page per observation" checked="false"/>
//+               <option name="AllBlankObs" checkbox="true" caption="Include all-blank observation fields" checked="true"/>
//+               <option name="ObsHeadings" checkbox="false" caption="Observation heading format">
//+                 <value type="Multi" default="Bold">
//+                     <multi> Bold </multi>
//+                     <multi> Italic </multi>
//+                     <multi> Underline </multi>
//+                     <multi> Inverted </multi>
//+                     <multi> Grey </multi>
//+                 </value>
//+               </option>
//+             </option>
//+             <option name="AbbrevHeadings" checkbox="true" caption="Use abbreviated headings" checked="false"/>
//+             <option name="MaxColWidth" checkbox="false" caption="Maximum column width"> 
//+                 <value type="Integer" min="1" max="100" units="%" default="100"/>
//+             </option>
//+             <option name="Grid" checkbox="true" caption="Grid lines" checked="true"/>
//+             <option name="Obs+SessImagesSection" expand="true" caption="Images and Charts">
//+               <option name="ObsImages" checkbox="true" caption="Show attached observation images"> 
//+                 <value type="Multi">
//+                     <multi init="printGS"> Grey-scale </multi>
//+                     <multi init="printBoW"> Black-on-white </multi>
//+                 </value>
//+               </option>
//+               <option name="ObsImagesPerRow" checkbox="false" caption="Number of attached images per row"> 
//+                 <value type="Integer" min="1" max="5" default="3" />
//+               </option>
//+               <option name="ConstellationChart" checkbox="true" caption="Show constellation chart"> 
//+                 <value type="Multi">
//+                     <multi init="printBoW"> Black-on-white </multi>
//+                 </value>
//+               </option>
//+             </option>
//+         </options>
//+     </task>
//+ </root>

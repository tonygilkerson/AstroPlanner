#classClass definition. Most classes are instantiated (as an object) by calling a function within the framework.e.g. dim obs as APObservation = session.Observation(i)In some cases you create a new instance by using the "new" operator.e.g. srch = new APSearch#class.constantsThese are constants used by, or inherent to, the encapsulating class. They can be used by specifying the class name. e.g. userfield.Type = APUserField.uftype_Double#class.constants.constA constant used by, or inherent to, the encapsulating class.#class.methodsThese are functions and sub(routine)s defined as methods in the encapsulating class. They are referred tousing the "dot" notation.e.g. session.Observation(i).LocalDateTime#class.methods.subSub(routine)s defined as methods in the encapsulating class. They do not have a return value, but somecan return results via ByRef parameters.#class.methods.functionFunctions defined as methods in the encapsulating class. They have a return value, but somecan also return results via ByRef parameters.#class.methods.sub.sharedShared sub(routine)s defined as methods in the encapsulating class. Also commonly known as class methods.They are not methods associated with a class instance (object), but are associated with the classitself. They must be called by prefixing the encapsulating class name.#class.methods.function.sharedShared functions defined as methods in the encapsulating class. Also commonly known as class methods.They are not methods associated with a class instance (object), but are associated with the classitself. They must be called by prefixing the encapsulating class name.e.g.  plan = APPlan.NewPlan()#class.propertiesProperties associated with the class. These can be read/write, read-only, and even write-only.#class.properties.dimA property associated with an instance of the class (object). These are read/write variables. They must be accessed by prefixing the object instance name.e.g. obj.ID#class.properties.sharedA property associated with the class itself, not individual instances of it. The property is effectivelyshared by all instances of the class. These are read/write variables. They must be accessed by prefixing the class name.e.g. APPlan.ErrorCode#class.properties.computedComputed properties associated with an instance of the class (object). These can be read/write, read-only, or write-only. They must be accessed by prefixing the object instance name. A computed property might have side-effects when accessed.e.g. obs.JulianDate would compute and return the Julian date of an observation.#class.properties.shared.computedComputed properties associated with the class itself, not individual instances of it. These can be read/write, read-only, or write-only. They must be accessed by prefixing the object instance name. A computed shared property might have side-effects when accessed.e.g. APSession.nSessions would compute and return the total number of sessions in the observation database.#moduleA module is just a convenient way to collect associated methods (subroutines and functions), global propertiesand global constants.#module.constantsThese are global constants that can be used anywhere. They can be usually used by specifying the constant name only.#module.constants.constA global constant that can be used anywhere.#module.propertiesGlobal properties that can be accessed from anywhere. These are all read/write variables.#module.properties.dimA global property that can be accessed from anywhere.#module.methodsThese are global functions and sub(routine)s that can be accessed from anywhere.#module.methods.subA global sub(routine) that can be accessed from anywhere.#module.methods.functionA global function that can be accessed from anywhere.#otherItems that are otherwise uncategorised.#deprecatedItems marked like this are deprecated or obsolete (i.e. still valid, but will be removed from the framework in the near future). Clicking on such an item will usually suggest a replacement framework method or property to use.#findThese items contain all framework items that match the Find parameter.#newthisreleaseThis is a new item for this release of the application, not present in the previous release.#deprecatedthisreleaseThis is an item that has been deprecated for this release of the application.#fixedthisreleaseThis item had a problem in previous releases which has been fixed for this release.#changedthisreleaseThis item has been changed for this release.#implementationThis class implements the specified interface. This means that as well as being a class of its given type, itis also a class of the implemented type.#interfaceAn interface is a kind of "promise" that if a class implements that interface, then any methods defined in the interface will be implemented in the class. It also means that if a class A implements interface B, then an objectif type A is also of type B. Think of it as a form of multiple inheritance, without the pitfalls.#interface.methodAny methods defined in an interface must be implemented in any class that implements the interface. Failure to do so will cause a compile error.#sectionThe contents of the user script file with the given name. Such files are included depending on thesettings in Scripting Preferences.#class.enums#class.enums.enum#class.structures#class.structures.structure#module.enums#module.enums.enum#module.structures#module.structures.structure